@page "/todo"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>

<ul>
    @foreach (var todo in todos)
    {
        <li>
            <input type="checkbox" checked="@todo.IsDone" @onchange="(e) => OnTodoCheckedChanged(todo, e)" />
            <input @bind="todo.Title" placeholder="Todo Title"  style="text-decoration:@(todo.IsDone ? "line-through" : "none");" />
            <button @onclick="() => RemoveTodo(todo)">X</button>
        </li>
    }
</ul>

<input @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>

@code {
    private List<TodoItem> todos = new();
    string newTodo = "";
    private bool isConnected;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<List<TodoItem>>("todos");
        todos = result.Success ? result.Value : new List<TodoItem>();
    }
    
    private async Task AddTodo()
    {
        if(!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo});
            newTodo = string.Empty;
            await UpdateSessionStore();
        }
    }

    private async Task OnTodoCheckedChanged(TodoItem todo, ChangeEventArgs e)
    {
        if (e.Value is bool isChecked)
        {
            todo.IsDone = isChecked;
            await UpdateSessionStore();
        }
    }

    private async Task RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
        await UpdateSessionStore();
    }

    private async Task UpdateSessionStore()
    {
        await ProtectedSessionStore.SetAsync("todos", todos);
    }
}
