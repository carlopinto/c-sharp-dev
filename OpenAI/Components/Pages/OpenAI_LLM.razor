@page "/openai_llm"
@rendermode InteractiveServer
@using OpenAI.Services;
@using OpenAI.Services.Data;
@inject IOpenAIService openAIService

<PageTitle>OpenAI LLM</PageTitle>

<h1>OpenAI</h1>

<p>This component demonstrates calling the OpenAI API.</p>
<br />
@if (warningMessage.Length > 0)
{
    <div class="alert alert-warning">
        <strong>Warning!</strong> @warningMessage
    </div>
}
<div class="row">
    <div class="col-sm-10">
        <input type="text" class="form-control" placeholder="Ask me anything" @bind="searchText" />
    </div>
    <div class="col-sm-2">
        <button class="btn btn-primary" @onclick="OnSearchClick">
            Ask Me!
        </button>
    </div>
</div>

@if (loading)
{
    <br />
    <div class="loader"></div>
    <p>OpenAI API is processing your query...</p>
}

<br />
<div class="row">
    <h4>Answer</h4>
    <textarea @bind="responseText" rows="20"></textarea>

    <div class="row">
        <p></p>
        <p>Token Used: @responseModel.Usage?.TotalTokens</p>
    </div>
</div>


@code {
    private string warningMessage = "";
    private string searchText = "";
    private CompletionResponseData responseModel = new();
    private string? responseText { get; set; }
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {

    }

    public async void OnSearchClick()
    {

        try
        {
            responseText = "";
            if (searchText.Length == 0)
            {
                warningMessage = "Please ask something!";
                return;
            }
            loading = true;
            responseModel = await openAIService.GetHttpResponseAsync(searchText);
            responseText = responseModel.Choices?[0]?.Message.Content;
            loading = false;

            // tells Blazor the data bindings needs updating
            StateHasChanged();
        }
        catch (Exception ex)
        {
            warningMessage = ex.Message;
        }
        loading = false;
    }
}
